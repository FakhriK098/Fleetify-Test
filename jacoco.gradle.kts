// credit: https://nolambda.stream/posts/jacoco-setup-for-multi-module-project/

// In here we can filter out what modules that we want to exclude from the jacoco report
val excludeProjects = arrayOf("app", "domain")

val coveredProjects = subprojects
    .filterNot { excludeProjects.contains(it.name) }

apply(plugin = "jacoco")

// configure() method takes a list as an argument and applies the configuration to the projects in this list.
configure(coveredProjects) {
    // Here we apply jacoco plugin to every project
    apply(plugin = "jacoco")

    // Here we create the task to generate Jacoco report
    // It depends to unit test task we don't have to manually running unit test before the task
    tasks.register<JacocoReport>("jacocoReport") {
        dependsOn("testDebugUnitTest")

        // Define what type of report we should generate
        // If we don't want to process the data further, html should be enough
        reports {
            csv.isEnabled = false
            xml.isEnabled = true
            html.isEnabled = true
        }

        // Setup the .class, source, and execution directories
        val fileFilter = mutableSetOf(
            "**/R.class",
            "**/R$*.class",
            "**/BuildConfig.*",
            "**/Manifest*.*",
            "android/**/*.*",
            "**/*App.*",
            "**/*_Impl*.*",
            "**/LocalDatabase.*",
            "**/*Application.*",
            "**/*Activity.*",
            "**/*ViewModel.*",
            "**/presentation",
            "**/core/**",
            "**/misc",
            // adapters generated by Moshi
            "**/*JsonAdapter.*",
            "**/*Binding.*",
            // Jacoco can not handle several "$" in class name.
            "**/*\$Lambda$*.*",
            // Kotlin specific, Jacoco can not handle several "$" in class name.
            "**/*\$inlined$*.*",
            // data binding
            "android/databinding/**/*.class",
            "**/android/databinding/*Binding.class",
            "**/android/databinding/*",
            "**/androidx/databinding/*",
            "**/BR.*",
            // android
            "**/R.class",
            "**/R$*.class",
            "**/BuildConfig.*",
            "**/Manifest*.*",
            "**/*Test*.*",
            "android/**/*.*",
            // kotlin
            "**/*MapperImpl*.*",
            "**/*\$ViewInjector*.*",
            "**/*\$ViewBinder*.*",
            "**/BuildConfig.*",
            "**/*Component*.*",
            "**/*BR*.*",
            "**/Manifest*.*",
            "**/*Companion*.*",
            "**/*Module*.*",
            "**/*Dagger*.*",
            "**/*Hilt*.*",
            "**/*MembersInjector*.*",
            "**/*_MembersInjector.class",
            "**/*_Factory*.*",
            "**/*_Provide*Factory*.*",
            "**/*Extensions*.*",
            "**/hilt_aggregated_deps/*.*",
            "**/*_MembersInjector.class",
            // covers component implementations
            "**/Dagger*Component.class",
            // covers component builders
            "**/Dagger*Component\$Builder.class",
            "**/*Module_*Factory.class"
        )

        // Include this if you use Kotlin
        val kotlinTree = fileTree("$buildDir/tmp/kotlin-classes/debug") {
            exclude(fileFilter)
        }

        val javacTree = fileTree("$buildDir/intermediates/javac/debug") {
            exclude(fileFilter)
        }

        val mainSrc = "$projectDir/src/main/java"

        val executionDataTree = fileTree(buildDir) {
            include(
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
            )
        }

        sourceDirectories.setFrom(file(mainSrc))
        classDirectories.setFrom(files(kotlinTree, javacTree))
        executionData.setFrom(executionDataTree)
    }
}

tasks.register<JacocoReport>("jacocoFullReport") {
    group = "Coverage reports"
    description = "Generates an aggregate report from all subprojects"

    val projects = coveredProjects
    val jacocoReports = projects.map { it.tasks.named<JacocoReport>("jacocoReport") }

    dependsOn(jacocoReports)

    val source = files(jacocoReports.map {
        it.get().sourceDirectories
    })

    val classes = files(jacocoReports.map {
        it.get().classDirectories
    })

    val executions = files(jacocoReports.map {
        it.get().executionData
    })

    additionalSourceDirs.setFrom(source)
    sourceDirectories.setFrom(source)
    classDirectories.setFrom(classes)
    executionData.setFrom(executions)

    reports {
        html.isEnabled = true
        html.destination = file("build/reports/jacoco/html")

        xml.isEnabled = true
        xml.destination = file("build/reports/jacoco/jacoco.xml")

        csv.isEnabled = false
    }
}
